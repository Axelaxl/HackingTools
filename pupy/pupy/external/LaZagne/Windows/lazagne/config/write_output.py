# -*- coding: utf-8 -*-from constant import constantfrom time import gmtime, strftimeimport os, getpass, socketimport loggingimport jsonimport tempfilefrom lazagne.config.header import Headerfrom colorama import init, Fore, Back, Styleinit() # init the colorama function# --------------------------- Functions used to write ---------------------------def write_header():	time = strftime("%Y-%m-%d %H:%M:%S", gmtime())	header = '''|====================================================================|\r\n|                                                                    |\r\n|                       Credentsials discovery                       |\r\n|                                                                    |\r\n|                          ! BANG BANG !                             |\r\n|                                                                    |\r\n|====================================================================|\r\n\r\n- Date: ''' + time + '''\n\r- Username: ''' + getpass.getuser() + ''' \r\n- Hostname: ''' + socket.gethostname() + ''' \r\n\r\n------------------------------ Results ------------------------------\r\n\r\n'''	open(constant.folder_name + os.sep + constant.file_name_results + '.txt',"a+b").write(header)def write_footer():	footer = '\n[+] %s passwords have been found.\r\n\r\n' % str(constant.nbPasswordFound)	open(constant.folder_name + os.sep + constant.file_name_results + '.txt',"a+b").write(footer)	def write_credentials(pwdFound, category, filePath):	tmp = "############ %s passwords ############\r\n\r\n" % category	for pwd in pwdFound:		for p in pwd.keys():			tmp = str(tmp) + str(p) + ": " + str(pwd[p].encode('utf-8')) + "\r\n"		tmp = str(tmp) + "\r\n"	open(filePath,"a+b").write(tmp)	def checks_write(values, category):	if values:		if "Passwords" not in constant.finalResults:			constant.finalResults["Passwords"] = []		constant.finalResults["Passwords"].append([{"Category": category}, values])# --------------------------- End of functions used to write ---------------------------# --------------------------- Output functions ---------------------------def print_footer():	footer = '\n[+] %s passwords have been found.\n' % str(constant.nbPasswordFound)	if logging.getLogger().isEnabledFor(logging.INFO) == False:		footer += 'For more information launch it again with the -v option\n'	print footer# print output if passwords have been founddef print_output(software_name, pwdFound, title1 = False):	if pwdFound:		# if the debug logging level is not apply => print the title		if logging.getLogger().isEnabledFor(logging.INFO) == False:			if not title1:				Header().title(software_name)				toWrite = []		password_category = False		for pwd in pwdFound:			# detect which kinds of password has been found			lower_list = [s.lower() for s in pwd.keys()]			password = [s for s in lower_list if "password" in s]			if password: 				password_category = password			else:				key = [s for s in lower_list if "key" in s] # for the wifi				if key: 					password_category = key				else:					hash = [s for s in lower_list if "hash" in s]					if hash:						password_category = hash						# No password found			if not password_category:				print_debug("FAILED", "Password not found !!!")			else:				print_debug("OK", '%s found !!!' % password_category[0].title())				toWrite.append(pwd)								# Store all passwords found on a table => for dictionary attack if master password set				constant.nbPasswordFound += 1				try:					constant.passwordFound.append(pwd[password_category[0]])				except:					pass						for p in pwd.keys():				try:					print '%s: %s' % (p, pwd[p])				except Exception,e:					print_debug('DEBUG', '{0}'.format(e))					print '%s: %s' % (p.encode('utf-8'), pwd[p].encode('utf-8'))			print				# write credentials into a text file		checks_write(toWrite, software_name)	else:		logging.info("[!] No passwords found\n")def print_debug(error_level, message):	# print when password is found	if error_level == 'OK':		print Fore.GREEN + message + Style.RESET_ALL	# print when password is not found	elif error_level == 'FAILED':		print Style.BRIGHT + Fore.RED + message + Style.RESET_ALL	# print messages depending of their criticism	elif error_level == 'CRITICAL':		logging.critical(Style.BRIGHT + Fore.RED + '[CRITICAL] %s\n' % message + Style.RESET_ALL)	elif error_level == 'ERROR':		logging.error(Style.BRIGHT + Fore.RED + '[ERROR] %s\n' % message + Style.RESET_ALL)	elif error_level == 'WARNING':		logging.warning(Fore.CYAN + '[WARNING] %s\n' % message + Style.RESET_ALL)	elif error_level == 'DEBUG':		logging.debug('[DEBUG] %s\n' % message)	elif error_level == 'INFO':		logging.info('%s\n' % message)		else:		logging.info('[%s] %s' % (error_level, message))# --------------------------- End of output functions ---------------------------def parseJsonResult(jsonString):	try:		for json in jsonString:			if json:				print '\n\n########## User: %s ##########\n' % json['User']				if 'Passwords' not in json:					print 'No passwords found for this user !'				else:					for all_passwords in json['Passwords']:						# print '- Category: %s' % all_passwords[0]['Category']						print '------------------- %s -----------------' % all_passwords[0]['Category']						for password_by_category in all_passwords[1]:							print '\nPassword found !!!'							for dic in password_by_category.keys():								try:									print '%s: %s' % (dic, password_by_category[dic])								except:									print '%s: %s' % (dic, password_by_category[dic].encode('utf-8'))						print	except Exception as e:		print_debug('ERROR', 'Error parsing the json results: %s' % e)		print_debug('ERROR', 'json content: %s' % jsonString)def parseJsonResultToBuffer(jsonString):	buffer = ''	try:		for json in jsonString:			if json:				buffer += '\r\n\r\n########## User: %s ##########\r\n' % json['User']				if 'Passwords' not in json:					buffer += 'No passwords found for this user !'				else:					for all_passwords in json['Passwords']:						# print '- Category: %s' % all_passwords[0]['Category']						buffer += '------------------- %s -----------------\r\n' % all_passwords[0]['Category']						for password_by_category in all_passwords[1]:							buffer += '\r\nPassword found !!!\r\n'							for dic in password_by_category.keys():								try:									buffer += '%s: %s\r\n' % (dic, password_by_category[dic])								except:									buffer += '%s: %s\r\n' % (dic, password_by_category[dic].encode('utf-8'))						buffer += '\r\n'	except Exception as e:		print_debug('ERROR', 'Error parsing the json results: %s' % e)		print_debug('ERROR', 'json content: %s' % jsonString)	return buffer 